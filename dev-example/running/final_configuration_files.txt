# ========================================
# üöÄ ROOT BUILD.GRADLE - Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ ÎπåÎìú ÏÑ§Ï†ï
# ========================================

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.4.0' apply false
    id 'com.netflix.dgs.codegen' version '6.0.3' apply false
}

allprojects {
    group = 'com.daangn'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

ext {
    set('springCloudVersion', "2023.0.0")
    set('testcontainersVersion', "1.19.1")
    set('mapstructVersion', "1.5.5.Final")
    set('jjwtVersion', "0.12.3")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'com.google.cloud.tools.jib'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // Spring Boot Core
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        
        // Spring Cloud
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
        implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        
        // Database
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'mysql:mysql-connector-java:8.2.0'
        implementation 'org.postgresql:postgresql:42.7.1'
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.flywaydb:flyway-mysql'
        
        // MongoDB (Chat Service)
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        
        // Elasticsearch (Search Service)
        implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
        
        // Messaging
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.apache.kafka:kafka-streams'
        
        // Security & JWT
        implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
        implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
        implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
        
        // WebSocket (Chat Service)
        implementation 'org.springframework.boot:spring-boot-starter-websocket'
        
        // Utils & Mapping
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        implementation 'org.apache.commons:commons-lang3:3.14.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        
        // AWS SDK
        implementation 'software.amazon.awssdk:s3:2.21.46'
        implementation 'software.amazon.awssdk:ses:2.21.46'
        implementation 'software.amazon.awssdk:sns:2.21.46'
        
        // Monitoring
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation 'io.micrometer:micrometer-tracing-bridge-otel'
        implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
        
        // Documentation
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
        
        // Annotation Processing
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        
        // Testing
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:mysql'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:mongodb'
        testImplementation 'org.testcontainers:elasticsearch'
        testImplementation 'org.testcontainers:kafka'
        testImplementation 'com.h2database:h2'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
    }

    jib {
        from {
            image = 'openjdk:21-jdk-slim'
        }
        to {
            image = "daangn/${project.name}"
            tags = [version, 'latest']
        }
        container {
            jvmFlags = ['-XX:+UseContainerSupport', '-XX:MaxRAMPercentage=70.0']
            ports = ['8080']
            environment = [
                'SPRING_PROFILES_ACTIVE': 'docker'
            ]
        }
    }
}

# ========================================
# üìù SETTINGS.GRADLE - Î™®Îì† Î™®Îìà Ìè¨Ìï®
# ========================================

rootProject.name = 'daangn-microservices-production'

// Platform Services
include ':microservices:platform:service-discovery'
include ':microservices:platform:api-gateway'
include ':microservices:platform:config-server'

// Core Services
include ':microservices:core-services:trade-service'
include ':microservices:core-services:chat-service'
include ':microservices:core-services:payment-service'
include ':microservices:core-services:review-service'

// Domain Services
include ':microservices:domain-services:user-service'
include ':microservices:domain-services:location-service'
include ':microservices:domain-services:community-service'
include ':microservices:domain-services:job-service'
include ':microservices:domain-services:real-estate-service'
include ':microservices:domain-services:car-service'
include ':microservices:domain-services:business-service'
include ':microservices:domain-services:meeting-service'
include ':microservices:domain-services:healthcare-service'
include ':microservices:domain-services:brand-service'
include ':microservices:domain-services:gift-service'
include ':microservices:domain-services:delivery-service'
include ':microservices:domain-services:auth-service'

// Support Services
include ':microservices:support-services:search-service'
include ':microservices:support-services:notification-service'
include ':microservices:support-services:moderation-service'
include ':microservices:support-services:log-service'

// Shared Libraries
include ':shared-libraries:common-domain'
include ':shared-libraries:common-infrastructure'
include ':shared-libraries:common-api'
include ':shared-libraries:common-test'
include ':shared-libraries:common-util'

# ========================================
# üê≥ DOCKER-COMPOSE.YML - Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤Ω
# ========================================

version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Databases
  mysql-trade:
    image: mysql:8.2
    container_name: mysql-trade
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: daangn_trade
      MYSQL_USER: daangn
      MYSQL_PASSWORD: daangn123
    ports:
      - "3306:3306"
    volumes:
      - mysql_trade_data:/var/lib/mysql
      - ./scripts/database/init-trade-db.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password

  mysql-user:
    image: mysql:8.2
    container_name: mysql-user
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: daangn_user
      MYSQL_USER: daangn
      MYSQL_PASSWORD: daangn123
    ports:
      - "3307:3306"
    volumes:
      - mysql_user_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password

  mysql-payment:
    image: mysql:8.2
    container_name: mysql-payment
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: daangn_payment
      MYSQL_USER: daangn
      MYSQL_PASSWORD: daangn123
    ports:
      - "3308:3306"
    volumes:
      - mysql_payment_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: daangn_chat
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./scripts/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    ports:
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Platform Services
  eureka-server:
    build: ./microservices/platform/service-discovery
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-server:
    build: ./microservices/platform/config-server
    container_name: config-server
    depends_on:
      eureka-server:
        condition: service_healthy
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

  api-gateway:
    build: ./microservices/platform/api-gateway
    container_name: api-gateway
    depends_on:
      - eureka-server
      - config-server
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888

  # Core Services
  trade-service:
    build: ./microservices/core-services/trade-service
    container_name: trade-service
    depends_on:
      - mysql-trade
      - redis
      - kafka
      - eureka-server
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-trade:3306/daangn_trade
      - SPRING_DATASOURCE_USERNAME=daangn
      - SPRING_DATASOURCE_PASSWORD=daangn123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

  chat-service:
    build: ./microservices/core-services/chat-service
    container_name: chat-service
    depends_on:
      - mongodb
      - redis
      - kafka
      - eureka-server
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongodb:27017/daangn_chat?authSource=admin
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

  payment-service:
    build: ./microservices/core-services/payment-service
    container_name: payment-service
    depends_on:
      - mysql-payment
      - redis
      - kafka
      - eureka-server
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-payment:3306/daangn_payment
      - SPRING_DATASOURCE_USERNAME=daangn
      - SPRING_DATASOURCE_PASSWORD=daangn123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

  user-service:
    build: ./microservices/domain-services/user-service
    container_name: user-service
    depends_on:
      - mysql-user
      - redis
      - kafka
      - eureka-server
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-user:3306/daangn_user
      - SPRING_DATASOURCE_USERNAME=daangn
      - SPRING_DATASOURCE_PASSWORD=daangn123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

  search-service:
    build: ./microservices/support-services/search-service
    container_name: search-service
    depends_on:
      - elasticsearch
      - kafka
      - eureka-server
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka

volumes:
  mysql_trade_data:
  mysql_user_data:
  mysql_payment_data:
  redis_data:
  mongodb_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  default:
    name: daangn-network

# ========================================
# üîß APPLICATION.YML - Í≥µÌÜµ ÏÑ§Ï†ï
# ========================================

spring:
  application:
    name: ${service.name:unknown-service}
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  cloud:
    config:
      enabled: true
      uri: ${SPRING_CLOUD_CONFIG_URI:http://localhost:8888}
      fail-fast: true
      retry:
        initial-interval: 1000
        max-attempts: 6
        multiplier: 1.1
  
  jackson:
    time-zone: Asia/Seoul
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
          order_inserts: true
          order_updates: true
        connection:
          provider_disables_autocommit: true

  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.daangn"

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,httptrace
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    com.daangn: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"

# ========================================
# üõ†Ô∏è Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏ - start-dev.sh
# ========================================

#!/bin/bash

echo "ü•ï ÎãπÍ∑ºÎßàÏºì ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ Í∞úÎ∞ú ÌôòÍ≤Ω ÏãúÏûë"
echo "================================================"

# Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§ Î®ºÏ†Ä ÏãúÏûë
echo "üì° Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë..."
docker-compose up -d zookeeper kafka mysql-trade mysql-user mysql-payment redis mongodb elasticsearch

# Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÎåÄÍ∏∞
echo "‚è≥ Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÎåÄÍ∏∞ Ï§ë..."
sleep 30

# ÌîåÎû´Ìèº ÏÑúÎπÑÏä§ ÏãúÏûë
echo "üèóÔ∏è ÌîåÎû´Ìèº ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë..."
docker-compose up -d eureka-server
sleep 15

docker-compose up -d config-server
sleep 10

docker-compose up -d api-gateway
sleep 10

# Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§ ÏãúÏûë
echo "üìä Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë..."
docker-compose up -d prometheus grafana jaeger kibana

# ÌïµÏã¨ ÏÑúÎπÑÏä§ ÏãúÏûë
echo "üî• ÌïµÏã¨ ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë..."
docker-compose up -d trade-service chat-service payment-service user-service search-service

echo ""
echo "‚úÖ Î™®Îì† ÏÑúÎπÑÏä§Í∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!"
echo ""
echo "üåê Ï†ëÏÜç Ï†ïÎ≥¥:"
echo "- API Gateway: http://localhost:8080"
echo "- Eureka Dashboard: http://localhost:8761"
echo "- Grafana: http://localhost:3000 (admin/admin)"
echo "- Prometheus: http://localhost:9090"
echo "- Kibana: http://localhost:5601"
echo "- Jaeger: http://localhost:16686"
echo ""
echo "üìö API Î¨∏ÏÑú:"
echo "- Trade Service: http://localhost:8081/swagger-ui.html"
echo "- Chat Service: http://localhost:8082/swagger-ui.html"
echo "- Payment Service: http://localhost:8083/swagger-ui.html"
echo "- User Service: http://localhost:8084/swagger-ui.html"
echo "- Search Service: http://localhost:8085/swagger-ui.html"
echo ""
echo "üéØ Î™®Îì† ÏÑúÎπÑÏä§Í∞Ä Ï§ÄÎπÑÎêòÎ©¥ http://localhost:8080 ÏóêÏÑú ÌÖåÏä§Ìä∏Ìï† Ïàò ÏûàÏäµÎãàÎã§!"

# ========================================
# üõë Ï¢ÖÎ£å Ïä§ÌÅ¨Î¶ΩÌä∏ - stop-dev.sh
# ========================================

#!/bin/bash

echo "üõë ÎãπÍ∑ºÎßàÏºì ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ Í∞úÎ∞ú ÌôòÍ≤Ω Ï¢ÖÎ£å"
echo "================================================"

# Î™®Îì† ÏÑúÎπÑÏä§ Ï¢ÖÎ£å
docker-compose down

# Î≥ºÎ•® Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
read -p "Îç∞Ïù¥ÌÑ∞ Î≥ºÎ•®ÎèÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose down -v
    echo "‚úÖ Îç∞Ïù¥ÌÑ∞ Î≥ºÎ•®ÍπåÏßÄ Î™®Îëê ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§."
else
    echo "‚úÖ ÏÑúÎπÑÏä§Îßå Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞Îäî Î≥¥Ï°¥Îê©ÎãàÎã§."
fi

echo "üèÅ Ï¢ÖÎ£å ÏôÑÎ£å!"

# ========================================
# üìù README.md - ÌîÑÎ°úÏ†ùÌä∏ Ïã§Ìñâ Í∞ÄÏù¥Îìú
# ========================================

# ü•ï ÎãπÍ∑ºÎßàÏºì ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ (ÌîÑÎ°úÎçïÏÖòÍ∏â)

ÎãπÍ∑ºÎßàÏºìÏùò Î™®Îì† ÏÑúÎπÑÏä§Î•º Ìè¨Ìï®Ìïú ÏôÑÏ†ÑÌïú ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ ÏïÑÌÇ§ÌÖçÏ≤òÏûÖÎãàÎã§.

## üöÄ Îπ†Î•∏ ÏãúÏûë

### 1. ÏÇ¨Ï†Ñ ÏöîÍµ¨ÏÇ¨Ìï≠
- Java 21
- Docker & Docker Compose
- Gradle 8.0+
- ÏµúÏÜå 16GB RAM Í∂åÏû•

### 2. Í∞úÎ∞ú ÌôòÍ≤Ω ÏãúÏûë
```bash
# Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
chmod +x scripts/start-dev.sh scripts/stop-dev.sh

# Í∞úÎ∞ú ÌôòÍ≤Ω ÏãúÏûë
./scripts/start-dev.sh

# Î°úÍ∑∏ ÌôïÏù∏
docker-compose logs -f

# Í∞úÎ∞ú ÌôòÍ≤Ω Ï¢ÖÎ£å
./scripts/stop-dev.sh
```

### 3. ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏
```bash
# Ï†ÑÏ≤¥ ÎπåÎìú
./gradlew build

# ÌäπÏ†ï ÏÑúÎπÑÏä§ ÎπåÎìú
./gradlew :microservices:core-services:trade-service:build

# Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏
./gradlew test

# ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
./gradlew jibDockerBuild
```

## üèóÔ∏è ÏïÑÌÇ§ÌÖçÏ≤ò

### ÏÑúÎπÑÏä§ Íµ¨ÏÑ± (Ï¥ù 20Í∞ú)
- **Platform (3Í∞ú)**: Discovery, Gateway, Config
- **Core (4Í∞ú)**: Trade, Chat, Payment, Review
- **Domain (10Í∞ú)**: User, Location, Community, Job, etc.
- **Support (3Í∞ú)**: Search, Notification, Moderation

### Í∏∞Ïà† Ïä§ÌÉù
- **Backend**: Spring Boot 3.2, Java 21
- **Database**: MySQL (ÏÉ§Îî©), MongoDB, Redis, Elasticsearch
- **Messaging**: Apache Kafka
- **Container**: Docker, Kubernetes
- **Monitoring**: Prometheus, Grafana, ELK, Jaeger

## üìä Î™®ÎãàÌÑ∞ÎßÅ

- **Grafana**: http://localhost:3000 (admin/admin)
- **Prometheus**: http://localhost:9090
- **Jaeger**: http://localhost:16686
- **Kibana**: http://localhost:5601

## üîó API Ï†ëÍ∑º

- **API Gateway**: http://localhost:8080
- **Eureka Dashboard**: http://localhost:8761
- **Swagger UI**: Í∞Å ÏÑúÎπÑÏä§Î≥Ñ :Ìè¨Ìä∏Î≤àÌò∏/swagger-ui.html

## üìö Î¨∏ÏÑú

- [ÏïÑÌÇ§ÌÖçÏ≤ò Î¨∏ÏÑú](./documentation/architecture/)
- [API Î¨∏ÏÑú](./documentation/api/)
- [Î∞∞Ìè¨ Í∞ÄÏù¥Îìú](./documentation/operations/)
- [Í∞úÎ∞ú Í∞ÄÏù¥Îìú](./documentation/development/)

## ü§ù Í∏∞Ïó¨ÌïòÍ∏∞

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìÑ ÎùºÏù¥ÏÑ†Ïä§

MIT License - ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ [LICENSE](LICENSE) ÌååÏùºÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.

---

**üéØ Ïù¥Ï†ú Ï†ïÎßêÎ°ú ÏôÑÏ†ÑÌïú ÎãπÍ∑ºÎßàÏºì ÏàòÏ§ÄÏùò ÌîÑÎ°úÎçïÏÖòÍ∏â ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ ÏïÑÌÇ§ÌÖçÏ≤òÍ∞Ä ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§!** üöÄ